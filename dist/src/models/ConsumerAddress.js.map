{"version":3,"sources":["../../../src/models/ConsumerAddress.js"],"names":["ConsumerAddress","Parse","Object","extend","initialize","attrs","options","loadInStore","store","recipientId","consumer","dispatch","rawParseObject"],"mappings":"sEAAA,uCACA,gC,gIAEA,GAAMA,iBAAkBC,MAAMC,MAAN,CAAaC,MAAb,CAAoB,iBAApB,CAAuC,CAC3DC,WAAY,oBAAUC,KAAV,CAAiBC,OAAjB,CAA0B,CAClC;;;;;;;;;;;;;;;;;;YAmBH,CArB0D,CAAvC,CAsBrB,CACCC,YAAa,qBAASC,KAAT,CAAgBC,WAAhB,CAA6BC,QAA7B,CAAsC,CAC/C,MAAOF,OAAMG,QAAN,CAAe,iCAAsBF,WAAtB,CAAmCC,SAASE,cAA5C,CAAf,CAAP,CACH,CAHF,CAtBqB,CAAxB,C,gBA4BeZ,e","file":"ConsumerAddress.js","sourcesContent":["import { loadConsumerAddresses } from '../actions/index';\nimport LatLng from './LatLng'\n\nconst ConsumerAddress = Parse.Object.extend('ConsumerAddress', {\n    initialize: function (attrs, options) {\n        /*\n         id = '';\n         location = new LatLng(0, 0);\n         address = '';\n         description = '';\n         name = '';\n         consumer = {};\n\n         set location(value) {\n         this._location = new LatLng(value.lat, value.lng)\n         }\n\n         get location () { return this._location }\n\n         super('ConsumerAddress', attributes, options);\n         if (attributes && attributes.location)  {\n         this.location = new LatLng(attributes.location.lat, attributes.location.lat)\n         }\n        * */\n    }\n}, {\n    loadInStore: function(store, recipientId, consumer){\n        return store.dispatch(loadConsumerAddresses(recipientId, consumer.rawParseObject))\n    }\n});\n\nexport default ConsumerAddress\n"]}