{"version":3,"sources":["../../src/bot.js"],"names":["_","APP_SECRET","process","env","MESSENGER_APP_SECRET","get","VALIDATION_TOKEN","MESSENGER_VALIDATION_TOKEN","SERVER_URL","FACEBOOK_GRAPH","BUSINESS","limit","console","error","exit","use","json","verify","verifyRequestSignature","listener","buffer","rules","Map","payloadRules","req","res","buf","signature","headers","elements","split","method","signatureHash","expectedHash","createHmac","update","digest","Error","receivedAuthentication","event","senderID","sender","id","recipientID","recipient","timeOfAuth","timestamp","parseInt","passThroughParam","optin","ref","log","sendTextMessage","receivedMessage","timeOfMessage","message","isEcho","is_echo","messageId","mid","appId","app_id","metadata","messageText","text","messageAttachments","attachments","quickReply","quick_reply","quickReplyPayload","payload","payloadFunction","includes","params","length","userListeners","existRule","isEmpty","keys","Object","key","shift","type","callback","toLowerCase","forEach","func","defaultSearch","location","coordinates","lat","lng","long","receivedDeliveryConfirmation","delivery","messageIDs","mids","watermark","sequenceNumber","seq","messageID","receivedPostback","timeOfPostback","postback","receivedMessageRead","read","receivedAccountLink","status","account_linking","authCode","authorization_code","callSendAPI","messageData","senderId","hasOwnProperty","uri","qs","access_token","PAGE_ACCESS_TOKEN","catch","testAPI","then","response","name","email","sendTypingOn","recipientId","sender_action","sendTypingOff","sendImageMessage","imageUrl","attachment","url","sendGifMessage","gifUrl","sendAudioMessage","audioUrl","sendVideoMessage","videoUrl","sendFileMessage","fileUrl","sendButtonMessage","buttons","template_type","sendGenericMessage","sendReceiptMessage","quick_replies","receiptId","Math","floor","random","sendQuickReplyMessage","sendReadReceipt","sendAccountLinking","findKeyStartsWith","map","str","value","startsWith","undefined","setListener","dataId","getListener","deleteListener","setDataBuffer","query","search","send","sendStatus","post","data","body","object","entry","pageEntry","pageID","timeOfEvent","time","messaging","messagingEvent","accountLinkingToken","redirectURI","redirectURISuccess","render","listen","module","exports","app","Parse"],"mappings":"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","file":"bot.js","sourcesContent":["import {app, Parse} from './server'\nimport bodyParser from 'body-parser'\nimport config from 'config';\nimport crypto from 'crypto';\nimport * as _ from 'underscore';\nimport rp from 'request-promise';\n\nconst APP_SECRET = (process.env.MESSENGER_APP_SECRET) ? process.env.MESSENGER_APP_SECRET : config.get('APP_SECRET');\n\nconst VALIDATION_TOKEN = (process.env.MESSENGER_VALIDATION_TOKEN) ? (process.env.MESSENGER_VALIDATION_TOKEN) : config.get('VALIDATION_TOKEN');\n\nconst SERVER_URL = (process.env.SERVER_URL) ? (process.env.SERVER_URL) : config.get('SERVER_URL');\n\nconst FACEBOOK_GRAPH = (process.env.FACEBOOK_GRAPH) ? (process.env.FACEBOOK_GRAPH) : config.get('FACEBOOK_GRAPH');\n\nconst BUSINESS = config.get('BUSINESS');\n\nconst limit = 9;\n\nif (!(APP_SECRET && VALIDATION_TOKEN && BUSINESS && SERVER_URL)) {\n    console.error(\"Missing config values\");\n    process.exit(1);\n}\n\napp.use(bodyParser.json({ verify: verifyRequestSignature }));\n//app.use(parseExpressHttpsRedirect());\n//app.use(parseExpressCookieSession({ fetchUser: true }));\n\nlet listener = {};\nlet buffer = {};\nlet rules = new Map();\nlet payloadRules = new Map();\n\n/*\n * Verify that the callback came from Facebook. Using the App Secret from\n * the App Dashboard, we can verify the signature that is sent with each\n * callback in the x-hub-signature field, located in the header.\n *\n * https://developers.facebook.com/docs/graph-api/webhooks#setup\n *\n */\nfunction verifyRequestSignature(req, res, buf) {\n    let signature = req.headers[\"x-hub-signature\"];\n\n    if (!signature) {\n        // For testing, let's log an error. In production, you should throw an\n        // error.\n        console.error(\"Couldn't validate the signature.\");\n    } else {\n        let elements = signature.split('=');\n        let method = elements[0];\n        let signatureHash = elements[1];\n\n        //console.log(signature);\n\n        let expectedHash = crypto.createHmac('sha1', APP_SECRET)\n            .update(buf)\n            .digest('hex');\n\n        if (signatureHash != expectedHash) {\n            throw new Error(\"Couldn't validate the request signature.\");\n        }\n    }\n}\n\n/*\n * Authorization Event\n *\n * The value for 'optin.ref' is defined in the entry point. For the \"Send to\n * Messenger\" plugin, it is the 'data-ref' field. Read more at\n * https://developers.facebook.com/docs/messenger-platform/webhook-reference/authentication\n *\n */\nfunction receivedAuthentication(event) {\n    let senderID = event.sender.id;\n    let recipientID = event.recipient.id;\n    let timeOfAuth = event.timestamp;\n\n    // The 'ref' field is set in the 'Send to Messenger' plugin, in the 'data-ref'\n    // The developer can set this to an arbitrary value to associate the\n    // authentication callback with the 'Send to Messenger' click event. This is\n    // a way to do account linking when the user clicks the 'Send to Messenger'\n    // plugin.\n\n    senderID = parseInt(senderID);\n    recipientID = parseInt(recipientID);\n    let passThroughParam = event.optin.ref;\n\n    console.log(\"Received authentication for user %d and page %d with pass \" +\n        \"through param '%s' at %d\", senderID, recipientID, passThroughParam,\n        timeOfAuth);\n\n    // When an authentication is received, we'll send a message back to the sender\n    // to let them know it was successful.\n    sendTextMessage(senderID, recipientID, \"Authentication successful\");\n}\n\n/*\n * Message Event\n *\n * This event is called when a message is sent to your page. The 'message'\n * object format can lety depending on the kind of message that was received.\n * Read more at https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-received\n *\n * For this example, we're going to echo any text that we get. If we get some\n * special keywords ('button', 'generic', 'receipt'), then we'll send back\n * examples of those bubbles to illustrate the special message bubbles we've\n * created. If we receive a message with an attachment (image, video, audio),\n * then we'll simply confirm that we've received the attachment.\n *\n */\nfunction receivedMessage(event) {\n    let senderID = event.sender.id;\n    let recipientID = event.recipient.id;\n    let timeOfMessage = event.timestamp;\n    let message = event.message;\n\n    //console.log(\"Received message for user %d and page %d at %d with message:\", senderID, recipientID, timeOfMessage);\n    //console.log(JSON.stringify(message));\n\n    let isEcho = message.is_echo;\n    let messageId = message.mid;\n    let appId = message.app_id;\n    let metadata = message.metadata;\n\n    // You may get a text or attachment but not both\n    let messageText = message.text;\n    let messageAttachments = message.attachments;\n    let quickReply = message.quick_reply;\n\n    senderID = parseInt(senderID);\n    recipientID = parseInt(recipientID);\n\n    if (isEcho) {\n        // Just logging message echoes to console\n        console.log(\"Received echo for message %s and app %d with metadata %s\",\n            messageId, appId, metadata);\n        return;\n    }\n    else if (quickReply) {\n        let quickReplyPayload = quickReply.payload;\n        //console.log(\"Quick reply for message %s with payload %s\", messageId, quickReplyPayload);\n        let payloadFunction;\n\n        if(quickReplyPayload.includes('-')){\n            let params = quickReplyPayload.split('-');\n            payloadFunction = payloadRules.get(params[0]);\n            //console.log(senderID);\n            //console.log(typeof senderID);\n            if(typeof payloadFunction == 'function'){\n                if(params.length == 4) {\n                    payloadFunction(senderID, recipientID, params[1], params[2], params[3]);\n                }\n                else if(params.length == 3) {\n                    payloadFunction(senderID, recipientID, params[1], params[2]);\n                }\n                else{\n                    payloadFunction(senderID, recipientID, params[1]);\n                }\n            }\n        }else{\n            payloadFunction = payloadRules.get(quickReplyPayload)\n\n            if(payloadFunction){\n                payloadFunction(senderID, recipientID);\n            }\n        }\n    }\n    else if (messageText) {\n        // If we receive a text message, check to see if it matches any special\n        // keywords and send back the corresponding example. Otherwise, just echo\n        // the text we received.\n\n        //Object.keys(listener);\n        let userListeners = listener[senderID];\n        let existRule = false;\n\n        if(!_.isEmpty(userListeners)){\n            if(!buffer[senderID]){\n                buffer[senderID] = {}\n            }\n            let keys = Object.keys(userListeners);\n            let key = keys.shift();\n\n            //console.log('User Listeners');\n\n            while(key){\n                //console.log(key);\n                if(userListeners[key].type == 'text'){\n                    buffer[senderID][key] = messageText;\n                    userListeners[key].callback(senderID, recipientID);\n                    existRule = true;\n                }\n                delete userListeners[key];\n                key = keys.shift();\n            }\n        }\n        else{\n            messageText = messageText.toLowerCase()\n\n            rules.forEach(function (func, key){\n                if(messageText.includes(key)){\n                    func(senderID, recipientID);\n                    existRule = true;\n                }\n            });\n        }\n\n        if(!existRule){\n            //console.log(messageText);\n            //console.log(defaultSearch);\n            defaultSearch(senderID, recipientID, messageText);\n        }\n\n    }\n    else if (messageAttachments) {\n        if(messageAttachments[0].type == 'location'){\n            let location = messageAttachments[0].payload.coordinates;\n            let userListeners = listener[senderID];\n            //console.log(senderID);\n            //console.log(typeof senderID);\n            if(!_.isEmpty(userListeners)){\n                if(!buffer[senderID]){\n                    buffer[senderID] = {}\n                }\n                let keys = Object.keys(userListeners);\n                let key = keys.shift();\n\n                while(key){\n                    //console.log(key);\n                    if(userListeners[key].type == 'attachment'){\n                        buffer[senderID][key] = {lat: location.lat, lng: location.long};\n                        userListeners[key].callback(senderID, recipientID);\n                    }\n                    delete userListeners[key]\n                    key = keys.shift();\n                }\n            }\n        }\n        //sendTextMessage(senderID, \"Message with attachment received\");\n    }\n\n}\n\n/*\n * Delivery Confirmation Event\n *\n * This event is sent to confirm the delivery of a message. Read more about\n * these fields at https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-delivered\n *\n */\nfunction receivedDeliveryConfirmation(event) {\n    let senderID = event.sender.id;\n    let recipientID = event.recipient.id;\n    let delivery = event.delivery;\n    let messageIDs = delivery.mids;\n    let watermark = delivery.watermark;\n    let sequenceNumber = delivery.seq;\n\n    senderID = parseInt(senderID);\n    recipientID = parseInt(recipientID);\n\n    if (messageIDs) {\n        messageIDs.forEach(function(messageID) {\n            //console.log(\"Received delivery confirmation for message ID: %s\", messageID);\n        });\n    }\n\n    //console.log(\"All message before %d were delivered.\", watermark);\n}\n\n/*\n * Postback Event\n *\n * This event is called when a postback is tapped on a Structured Message.\n * https://developers.facebook.com/docs/messenger-platform/webhook-reference/postback-received\n *\n */\nfunction receivedPostback(event) {\n    let senderID = event.sender.id;\n    let recipientID = event.recipient.id;\n    let timeOfPostback = event.timestamp;\n\n    // The 'payload' param is a developer-defined field which is set in a postback\n    // button for Structured Messages.\n    let payload = event.postback.payload;\n\n    //console.log(\"Received postback for user %d and page %d with payload '%s' \" + \"at %d\", senderID, recipientID, payload, timeOfPostback);\n\n    // When a postback is called, we'll send a message back to the sender to\n    // let them know it was successful\n\n    let payloadFunction;\n\n    let params = payload.split('-');\n\n    payloadFunction = payloadRules.get(params[0]);\n    senderID = parseInt(senderID);\n    recipientID = parseInt(recipientID);\n\n    //console.log(senderID);\n    //console.log(typeof senderID);\n\n    if(payloadFunction){\n        switch (params.length){\n            case 1:\n                payloadFunction(senderID, recipientID);\n                break;\n            case 2:\n                payloadFunction(senderID, recipientID, params[1]);\n                break;\n            case 3:\n                payloadFunction(senderID, recipientID, params[1], params[2]);\n                break;\n            default:\n                console.log('Payload not found: '+params)\n        }\n    }\n\n    /*\n    if(payload == 'Greeting'){\n        sendMenuMessage(senderID);\n    }\n    else if(payload == 'Delivery'){\n        sendMenuMessage(senderID);\n    }\n    else if(payload.startsWith(\"ListCategories\")){\n        let params = payload.split(\"-\");\n        console.log(\"List Categories\");\n        console.log(params);\n        listCategories(senderID, parseInt(params[1]));\n    }\n    else if(payload.startsWith(\"ListProducts\")){\n        let params = payload.split(\"-\");\n        listProducts(senderID, params[1], parseInt(params[2]));\n    }\n    else if(payload.startsWith(\"Add\")){\n        let params = payload.split(\"-\");\n        addProduct(params[1]);\n    }\n    else if(payload.startsWith(\"ShoppingCart\")){\n        sendBillMessage(senderID);\n    }\n    else{\n        sendTextMessage(senderID, \"Postback called \"+payload);\n    }\n    */\n}\n\n/*\n * Message Read Event\n *\n * This event is called when a previously-sent message has been read.\n * https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-read\n *\n */\nfunction receivedMessageRead(event) {\n    let senderID = event.sender.id;\n    let recipientID = event.recipient.id;\n\n    // All messages before watermark (a timestamp) or sequence have been seen.\n    let watermark = event.read.watermark;\n    let sequenceNumber = event.read.seq;\n\n    senderID = parseInt(senderID);\n    recipientID = parseInt(recipientID);\n\n    console.log(\"Received message read event for watermark %d and sequence \" +\n        \"number %d\", watermark, sequenceNumber);\n}\n\n/*\n * Account Link Event\n *\n * This event is called when the Link Account or UnLink Account action has been\n * tapped.\n * https://developers.facebook.com/docs/messenger-platform/webhook-reference/account-linking\n *\n */\nfunction receivedAccountLink(event) {\n    let senderID = event.sender.id;\n    let recipientID = event.recipient.id;\n\n    let status = event.account_linking.status;\n    let authCode = event.account_linking.authorization_code;\n\n    senderID = parseInt(senderID);\n    recipientID = parseInt(recipientID);\n\n    console.log(\"Received account link event with for user %d with status %s \" +\n        \"and auth code %s \", senderID, status, authCode);\n}\n\n/*\n * Call the Send API. The message data goes in the body. If successful, we'll\n * get the message id in a response\n *\n */\nfunction callSendAPI(messageData, senderId) {\n    if(BUSINESS.hasOwnProperty(senderId)){\n        return rp({\n            uri: FACEBOOK_GRAPH+'me/messages',\n            qs: { access_token: BUSINESS[senderId].PAGE_ACCESS_TOKEN },\n            method: 'POST',\n            json: messageData\n        }).catch(error =>{\n            console.log('error');\n            console.log(error);\n        });\n    }\n    else{\n        console.log('Error: senderId not found: '+senderId)\n        console.log(messageData);\n    }\n}\n\nfunction testAPI(senderId){\n    return rp({\n        uri: FACEBOOK_GRAPH+'me?fields=name,email,age_range,birthday,is_verified,location',\n        qs: { access_token: BUSINESS[senderId].PAGE_ACCESS_TOKEN },\n        method: 'GET'\n    }).then( response => {\n        console.log('Successful login for: ' + response.name);\n        console.log('Thanks for logging in, ' + response.email + '!');\n        console.log(response);\n    }).catch(error =>{\n        console.log('error');\n        console.log(error);\n    });\n}\n\n/*\n * Turn typing indicator on\n *\n */\nfunction sendTypingOn(recipientId, senderId) {\n    //console.log(\"Turning typing indicator on\");\n\n    let messageData = {\n        recipient: {\n            id: recipientId\n        },\n        sender_action: \"typing_on\"\n    };\n\n    return callSendAPI(messageData, senderId);\n}\n\n/*\n * Turn typing indicator off\n *\n */\nfunction sendTypingOff(recipientId, senderId) {\n    //console.log(\"Turning typing indicator off\");\n\n    let messageData = {\n        recipient: {\n            id: recipientId\n        },\n        sender_action: \"typing_off\"\n    };\n\n    return callSendAPI(messageData, senderId);\n}\n\n/*\n * Send a text message using the Send API.\n *\n */\nfunction sendTextMessage(recipientId, senderId,  messageText) {\n    let messageData = {\n        recipient: {\n            id: recipientId\n        },\n        message: {\n            text: messageText\n            //metadata: \"DEVELOPER_DEFINED_METADATA\"\n        }\n    };\n\n    return callSendAPI(messageData, senderId);\n}\n\n/*\n * Send an image using the Send API.\n *\n */\nfunction sendImageMessage(recipientId, senderId, imageUrl) {\n    let messageData = {\n        recipient: {\n            id: recipientId\n        },\n        message: {\n            attachment: {\n                type: \"image\",\n                payload: {\n                    url: imageUrl\n                }\n            }\n        }\n    };\n\n    return callSendAPI(messageData, senderId);\n}\n\n/*\n * Send a Gif using the Send API.\n *\n */\nfunction sendGifMessage(recipientId, senderId, gifUrl) {\n    let messageData = {\n        recipient: {\n            id: recipientId\n        },\n        message: {\n            attachment: {\n                type: \"image\",\n                payload: {\n                    url: SERVER_URL + gifUrl\n                }\n            }\n        }\n    };\n\n    return callSendAPI(messageData, senderId);\n}\n\n/*\n * Send audio using the Send API.\n *\n */\nfunction sendAudioMessage(recipientId, senderId, audioUrl) {\n    let messageData = {\n        recipient: {\n            id: recipientId\n        },\n        message: {\n            attachment: {\n                type: \"audio\",\n                payload: {\n                    url: SERVER_URL + audioUrl\n                }\n            }\n        }\n    };\n\n    return callSendAPI(messageData, senderId);\n}\n\n/*\n * Send a video using the Send API.\n *\n */\nfunction sendVideoMessage(recipientId, senderId, videoUrl) {\n    let messageData = {\n        recipient: {\n            id: recipientId\n        },\n        message: {\n            attachment: {\n                type: \"video\",\n                payload: {\n                    url: SERVER_URL + videoUrl\n                }\n            }\n        }\n    };\n\n    return callSendAPI(messageData, senderId);\n}\n\n/*\n * Send a video using the Send API.\n *\n */\nfunction sendFileMessage(recipientId, senderId, fileUrl) {\n    let messageData = {\n        recipient: {\n            id: recipientId\n        },\n        message: {\n            attachment: {\n                type: \"file\",\n                payload: {\n                    url: SERVER_URL + fileUrl\n                }\n            }\n        }\n    };\n\n    return callSendAPI(messageData, senderId);\n}\n\n/*\n * Send a button message using the Send API.\n *\n */\nfunction sendButtonMessage(recipientId, senderId, text, buttons) {\n    let messageData = {\n        recipient: {\n            id: recipientId\n        },\n        message: {\n            attachment: {\n                type: \"template\",\n                payload: {\n                    template_type: \"button\",\n                    text: text,\n                    buttons: buttons\n                }\n            }\n        }\n    };\n\n    /*\n     {\n        type: \"web_url\",\n        url: \"https://www.oculus.com/en-us/rift/\",\n        title: \"Open Web URL\"\n     }, {\n        type: \"postback\",\n        title: \"Trigger Postback\",\n        payload: \"DEVELOPED_DEFINED_PAYLOAD\"\n     }, {\n        type: \"phone_number\",\n        title: \"Call Phone Number\",\n        payload: \"+16505551234\"\n     }\n\n    * */\n\n    return callSendAPI(messageData, senderId);\n}\n\n/*\n * Send a Structured Message (Generic Message type) using the Send API.\n *\n */\nfunction sendGenericMessage(recipientId, senderId, elements) {\n    let messageData = {\n        recipient: {\n            id: recipientId\n        },\n        message: {\n            attachment: {\n                type: \"template\",\n                payload: {\n                    template_type: \"generic\",\n                    elements: elements\n                }\n            }\n        }\n    };\n\n    return callSendAPI(messageData, senderId);\n}\n\n/*\n * Send a receipt message using the Send API.\n *\n */\nfunction sendReceiptMessage(recipientId, senderId, payload, quick_replies) {\n    // Generate a random receipt ID as the API requires a unique ID\n    let receiptId = \"order\" + Math.floor(Math.random()*1000);\n\n    let messageData = {\n        recipient: {\n            id: recipientId\n        },\n        message:{\n            attachment: {\n                type: \"template\",\n                payload: payload\n            },\n            quick_replies: quick_replies\n        }\n    };\n    /*\n    * {\n     template_type: \"receipt\",\n     recipient_name: \"Peter Chang\",\n     order_number: receiptId,\n     currency: \"COP\",\n     payment_method: \"Visa 1234\",\n     timestamp: \"1428444852\",\n     elements: [{\n     title: \"Oculus Rift\",\n     subtitle: \"Includes: headset, sensor, remote\",\n     quantity: 1,\n     price: 599.00,\n     currency: \"USD\",\n     image_url: SERVER_URL + \"/assets/riftsq.png\"\n     }, {\n     title: \"Samsung Gear VR\",\n     subtitle: \"Frost White\",\n     quantity: 1,\n     price: 99.99,\n     currency: \"USD\",\n     image_url: SERVER_URL + \"/assets/gearvrsq.png\"\n     }],\n     address: {\n     street_1: \"1 Hacker Way\",\n     street_2: \"\",\n     city: \"Menlo Park\",\n     postal_code: \"94025\",\n     state: \"CA\",\n     country: \"US\"\n     },\n     summary: {\n     subtotal: 698.99,\n     shipping_cost: 20.00,\n     total_tax: 57.67,\n     total_cost: 626.66\n     },\n     adjustments: [{\n     name: \"New Customer Discount\",\n     amount: -50\n     }, {\n     name: \"$100 Off Coupon\",\n     amount: -100\n     }]\n     }\n    *\n    * */\n    return callSendAPI(messageData, senderId);\n}\n\n/*\n * Send a message with Quick Reply buttons.\n *\n */\nfunction sendQuickReplyMessage(recipientId, senderId, text, quick_replies) {\n    let messageData = {\n        recipient: {\n            id: recipientId\n        },\n        message: {\n            text: text,\n            //metadata: \"DEVELOPER_DEFINED_METADATA\",\n            quick_replies: quick_replies\n        }\n    };\n\n    /*\n\n     [\n     {\n     \"content_type\":\"text\",\n     \"title\":\"Action\",\n     \"payload\":\"DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_ACTION\"\n     },\n     {\n     \"content_type\":\"text\",\n     \"title\":\"Comedy\",\n     \"payload\":\"DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_COMEDY\"\n     },\n     {\n     \"content_type\":\"text\",\n     \"title\":\"Drama\",\n     \"payload\":\"DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_DRAMA\"\n     }\n     ]\n\n    * */\n\n    return callSendAPI(messageData, senderId);\n}\n\n/*\n * Send a read receipt to indicate the message has been read\n *\n */\nfunction sendReadReceipt(recipientId, senderId) {\n    console.log(\"Sending a read receipt to mark message as seen\");\n\n    let messageData = {\n        recipient: {\n            id: recipientId\n        },\n        sender_action: \"mark_seen\"\n    };\n\n    return callSendAPI(messageData, senderId);\n}\n\n/*\n * Send a message with the account linking call-to-action\n *\n */\nfunction sendAccountLinking(recipientId, senderId, payload) {\n    let messageData = {\n        recipient: {\n            id: recipientId\n        },\n        message: {\n            attachment: {\n                type: \"template\",\n                payload: payload\n            }\n        }\n    };\n\n    /*\n\n     {\n     template_type: \"button\",\n     text: \"Welcome. Link your account.\",\n     buttons:[{\n     type: \"account_link\",\n     url: SERVER_URL + \"/authorize\"\n     }]\n     }\n\n    * */\n\n    return callSendAPI(messageData, senderId);\n}\n\nfunction findKeyStartsWith(map, str){\n    for (let [key, value] of map) {\n        if(key.startsWith(str))\n            return value;\n    }\n    return undefined;\n}\n\nfunction setListener(recipientId, dataId, type, callback){\n    if(typeof listener[recipientId] == 'undefined'){\n        listener[recipientId] = {};\n    }\n\n    listener[recipientId][dataId] = {callback: callback, type: type};\n}\n\nfunction getListener(recipientId, dataId){\n    if(typeof listener[recipientId] == 'undefined'){\n        return undefined\n    }\n\n    return listener[recipientId][dataId];\n}\n\nfunction deleteListener(recipientId, dataId){\n    if(!listener[recipientId]){\n        return false\n    }\n\n    delete listener[recipientId][dataId]\n    return true\n\n}\n\nfunction setDataBuffer(recipientId, key, value){\n    if(!buffer[recipientId]){\n        buffer[recipientId] = {}\n    }\n    buffer[recipientId][key] = value;\n}\n\nfunction defaultSearch(recipientId, senderId, query){\n    console.log('defaultSearch');\n    //console.log(search);\n    let search = payloadRules.get('Search');\n\n    if(search){\n        search(recipientId, senderId, query);\n    }\n};\n\n/*\n * Use your own validation token. Check that the token used in the Webhook\n * setup is the same token used here.\n *\n */\napp.get('/webhook', function (req, res) {\n    if (req.query['hub.mode'] === 'subscribe' && req.query['hub.verify_token'] === VALIDATION_TOKEN) {\n        console.log(\"Validating webhook\");\n        res.status(200).send(req.query['hub.challenge']);\n    } else {\n        console.error(\"Failed validation. Make sure the validation tokens match.\");\n        res.sendStatus(403);\n    }\n});\n\n/*\n * All callbacks for Messenger are POST-ed. They will be sent to the same\n * webhook. Be sure to subscribe your app to your page to receive callbacks\n * for your page.\n * https://developers.facebook.com/docs/messenger-platform/product-overview/setup#subscribe_app\n *\n */\napp.post('/webhook', function (req, res) {\n    let data = req.body;\n\n    // Make sure this is a page subscription\n    if (data.object == 'page') {\n        // Iterate over each entry\n        // There may be multiple if batched\n        data.entry.forEach(function (pageEntry) {\n            let pageID = pageEntry.id;\n            let timeOfEvent = pageEntry.time;\n\n            // Iterate over each messaging event\n            pageEntry.messaging.forEach(function (messagingEvent) {\n                //console.log(messagingEvent);\n                if (messagingEvent.optin) {\n                    receivedAuthentication(messagingEvent);\n                } else if (messagingEvent.message) {\n                    receivedMessage(messagingEvent);\n                } else if (messagingEvent.delivery) {\n                    receivedDeliveryConfirmation(messagingEvent);\n                } else if (messagingEvent.postback) {\n                    receivedPostback(messagingEvent);\n                } else if (messagingEvent.read) {\n                    receivedMessageRead(messagingEvent);\n                } else if (messagingEvent.account_linking) {\n                    receivedAccountLink(messagingEvent);\n                } else {\n                    console.log(\"Webhook received unknown messagingEvent: \", messagingEvent);\n                }\n            });\n        });\n\n        // Assume all went well.\n        //\n        // You must send back a 200, within 20 seconds, to let us know you've\n        // successfully received the callback. Otherwise, the request will time out.\n        res.sendStatus(200);\n    }\n});\n\n/*\n * This path is used for account linking. The account linking call-to-action\n * (sendAccountLinking) is pointed to this URL.\n *\n */\napp.get('/authorize', function (req, res) {\n    let accountLinkingToken = req.query['account_linking_token'];\n    let redirectURI = req.query['redirect_uri'];\n\n    // Authorization Code should be generated per user by the developer. This will\n    // be passed to the Account Linking callback.\n    let authCode = \"1234567890\";\n\n    // Redirect users to this URI on successful login\n    let redirectURISuccess = redirectURI + \"&authorization_code=\" + authCode;\n\n    res.render('authorize', {\n        accountLinkingToken: accountLinkingToken,\n        redirectURI: redirectURI,\n        redirectURISuccess: redirectURISuccess\n    });\n});\n\n// Start server\n// Webhooks must be available via SSL with a certificate signed by a valid\n// certificate authority.\napp.listen(app.get('port'), function() {\n    //console.log('Node app is running on port', app.get('port'));\n});\n\nmodule.exports = {app, Parse, rules, payloadRules, buffer, listener, limit, defaultSearch, callSendAPI, sendTypingOn, sendTypingOff, sendTextMessage, sendQuickReplyMessage, sendImageMessage, sendGifMessage, sendAudioMessage, sendVideoMessage, sendFileMessage, sendButtonMessage, sendGenericMessage, sendReceiptMessage, setListener, getListener, deleteListener, setDataBuffer, testAPI};\n"]}