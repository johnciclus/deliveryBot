{"version":3,"sources":["server.js"],"names":[],"mappings":"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","file":"server-compiled.js","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport config from 'config';\nimport crypto from 'crypto';\nimport request from 'request';\n\n// App Secret can be retrieved from the App Dashboard\nconst APP_SECRET = (process.env.MESSENGER_APP_SECRET) ? process.env.MESSENGER_APP_SECRET : config.get('APP_SECRET');\n\n// Arbitrary value used to validate a webhook\nconst VALIDATION_TOKEN = (process.env.MESSENGER_VALIDATION_TOKEN) ? (process.env.MESSENGER_VALIDATION_TOKEN) : config.get('VALIDATION_TOKEN');\n\n// Generate a page access token for your page from the App Dashboard\nconst PAGE_ACCESS_TOKEN = (process.env.MESSENGER_PAGE_ACCESS_TOKEN) ? (process.env.MESSENGER_PAGE_ACCESS_TOKEN) : config.get('PAGE_ACCESS_TOKEN');\n\n// URL where the app is running (include protocol). Used to point to scripts and\n// assets located at this address.\nconst SERVER_URL = (process.env.SERVER_URL) ? (process.env.SERVER_URL) : config.get('SERVER_URL');\n\nconst PARSE_APP_ID = (process.env.PARSE_APP_ID) ? (process.env.PARSE_APP_ID) : config.get('PARSE_APP_ID');\n\nconst PARSE_SERVER_URL = (process.env.PARSE_SERVER_URL) ? (process.env.PARSE_SERVER_URL) : config.get('PARSE_SERVER_URL');\n\nconst FACEBOOK_APP_ID = (process.env.FACEBOOK_APP_ID) ? (process.env.FACEBOOK_APP_ID) : config.get('FACEBOOK_APP_ID');\n\nconst REDIRECT_URI = (process.env.REDIRECT_URI) ? (process.env.REDIRECT_URI) : config.get('REDIRECT_URI');\n\nif (!(APP_SECRET && VALIDATION_TOKEN && PAGE_ACCESS_TOKEN && SERVER_URL)) {\n    console.error(\"Missing config values\");\n    process.exit(1);\n}\n\nvar app = express();\napp.set('port', process.env.PORT || 8000);\napp.set('view engine', 'ejs');\napp.use(bodyParser.json({ verify: verifyRequestSignature }));\napp.use(express.static('public'));\n\nvar rules = new Map();\n\n/*\n * Verify that the callback came from Facebook. Using the App Secret from\n * the App Dashboard, we can verify the signature that is sent with each\n * callback in the x-hub-signature field, located in the header.\n *\n * https://developers.facebook.com/docs/graph-api/webhooks#setup\n *\n */\nfunction verifyRequestSignature(req, res, buf) {\n    var signature = req.headers[\"x-hub-signature\"];\n\n    if (!signature) {\n        // For testing, let's log an error. In production, you should throw an\n        // error.\n        console.error(\"Couldn't validate the signature.\");\n    } else {\n        var elements = signature.split('=');\n        var method = elements[0];\n        var signatureHash = elements[1];\n\n        var expectedHash = crypto.createHmac('sha1', APP_SECRET)\n            .update(buf)\n            .digest('hex');\n\n        if (signatureHash != expectedHash) {\n            throw new Error(\"Couldn't validate the request signature.\");\n        }\n    }\n}\n\n/*\n * Authorization Event\n *\n * The value for 'optin.ref' is defined in the entry point. For the \"Send to\n * Messenger\" plugin, it is the 'data-ref' field. Read more at\n * https://developers.facebook.com/docs/messenger-platform/webhook-reference/authentication\n *\n */\nfunction receivedAuthentication(event) {\n    var senderID = event.sender.id;\n    var recipientID = event.recipient.id;\n    var timeOfAuth = event.timestamp;\n\n    // The 'ref' field is set in the 'Send to Messenger' plugin, in the 'data-ref'\n    // The developer can set this to an arbitrary value to associate the\n    // authentication callback with the 'Send to Messenger' click event. This is\n    // a way to do account linking when the user clicks the 'Send to Messenger'\n    // plugin.\n    var passThroughParam = event.optin.ref;\n\n    console.log(\"Received authentication for user %d and page %d with pass \" +\n        \"through param '%s' at %d\", senderID, recipientID, passThroughParam,\n        timeOfAuth);\n\n    // When an authentication is received, we'll send a message back to the sender\n    // to let them know it was successful.\n    sendTextMessage(senderID, \"Authentication successful\");\n}\n\n/*\n * Message Event\n *\n * This event is called when a message is sent to your page. The 'message'\n * object format can vary depending on the kind of message that was received.\n * Read more at https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-received\n *\n * For this example, we're going to echo any text that we get. If we get some\n * special keywords ('button', 'generic', 'receipt'), then we'll send back\n * examples of those bubbles to illustrate the special message bubbles we've\n * created. If we receive a message with an attachment (image, video, audio),\n * then we'll simply confirm that we've received the attachment.\n *\n */\nfunction receivedMessage(event) {\n    var senderID = event.sender.id;\n    var recipientID = event.recipient.id;\n    var timeOfMessage = event.timestamp;\n    var message = event.message;\n\n    console.log(\"Received message for user %d and page %d at %d with message:\",\n        senderID, recipientID, timeOfMessage);\n    console.log(JSON.stringify(message));\n\n    var isEcho = message.is_echo;\n    var messageId = message.mid;\n    var appId = message.app_id;\n    var metadata = message.metadata;\n\n    // You may get a text or attachment but not both\n    var messageText = message.text;\n    var messageAttachments = message.attachments;\n    var quickReply = message.quick_reply;\n\n    if (isEcho) {\n        // Just logging message echoes to console\n        console.log(\"Received echo for message %s and app %d with metadata %s\",\n            messageId, appId, metadata);\n        return;\n    } else if (quickReply) {\n        var quickReplyPayload = quickReply.payload;\n        console.log(\"Quick reply for message %s with payload %s\",\n            messageId, quickReplyPayload);\n\n        sendTextMessage(senderID, \"Quick reply tapped\");\n        return;\n    }\n\n    if (messageText) {\n\n        // If we receive a text message, check to see if it matches any special\n        // keywords and send back the corresponding example. Otherwise, just echo\n        // the text we received.\n        switch (messageText) {\n            case 'image':\n                sendImageMessage(senderID);\n                break;\n\n            case 'gif':\n                sendGifMessage(senderID);\n                break;\n\n            case 'audio':\n                sendAudioMessage(senderID);\n                break;\n\n            case 'video':\n                sendVideoMessage(senderID);\n                break;\n\n            case 'file':\n                sendFileMessage(senderID);\n                break;\n\n            case 'button':\n                sendButtonMessage(senderID);\n                break;\n\n            case 'generic':\n                sendGenericMessage(senderID);\n                break;\n\n            case 'receipt':\n                sendReceiptMessage(senderID);\n                break;\n\n            case 'quick reply':\n                sendQuickReply(senderID);\n                break;\n\n            case 'read receipt':\n                sendReadReceipt(senderID);\n                break;\n\n            case 'typing on':\n                sendTypingOn(senderID);\n                break;\n\n            case 'typing off':\n                sendTypingOff(senderID);\n                break;\n\n            case 'account linking':\n                sendAccountLinking(senderID);\n                break;\n\n            //default:\n            //sendTextMessage(senderID, messageText);\n        }\n\n        messageText = messageText.toLowerCase()\n\n        if(rules.get(messageText)){\n            rules.get(messageText)(senderID);\n        }\n/*\n        if (messageText.indexOf(\"hola\") > -1){\n            sendMenuMessage(senderID);\n        }\n        else if (messageText.indexOf(\"buenos dias\") > -1){\n            sendMenuMessage(senderID);\n        }\n        else if (messageText.indexOf(\"menu del dia\") > -1){\n            sendMenuMessage(senderID);\n        }\n        else if (messageText.indexOf(\"cuenta\") > -1){\n            sendBillMessage(senderID);\n        }\n*/\n    } else if (messageAttachments) {\n        sendTextMessage(senderID, \"Message with attachment received\");\n    }\n}\n\n/*\n * Delivery Confirmation Event\n *\n * This event is sent to confirm the delivery of a message. Read more about\n * these fields at https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-delivered\n *\n */\nfunction receivedDeliveryConfirmation(event) {\n    var senderID = event.sender.id;\n    var recipientID = event.recipient.id;\n    var delivery = event.delivery;\n    var messageIDs = delivery.mids;\n    var watermark = delivery.watermark;\n    var sequenceNumber = delivery.seq;\n\n    if (messageIDs) {\n        messageIDs.forEach(function(messageID) {\n            console.log(\"Received delivery confirmation for message ID: %s\",\n                messageID);\n        });\n    }\n\n    console.log(\"All message before %d were delivered.\", watermark);\n}\n\n/*\n * Postback Event\n *\n * This event is called when a postback is tapped on a Structured Message.\n * https://developers.facebook.com/docs/messenger-platform/webhook-reference/postback-received\n *\n */\nfunction receivedPostback(event) {\n    var senderID = event.sender.id;\n    var recipientID = event.recipient.id;\n    var timeOfPostback = event.timestamp;\n\n    // The 'payload' param is a developer-defined field which is set in a postback\n    // button for Structured Messages.\n    var payload = event.postback.payload;\n\n    console.log(\"Received postback for user %d and page %d with payload '%s' \" +\n        \"at %d\", senderID, recipientID, payload, timeOfPostback);\n\n    // When a postback is called, we'll send a message back to the sender to\n    // let them know it was successful\n    if(payload == 'Greeting'){\n        sendMenuMessage(senderID);\n    }\n    else if(payload.startsWith(\"ListCategories\")){\n        var params = payload.split(\"-\");\n        console.log(\"List Categories\");\n        console.log(params);\n        listCategories(senderID, parseInt(params[1]));\n    }\n    else if(payload.startsWith(\"ListProducts\")){\n        var params = payload.split(\"-\");\n        listProducts(senderID, params[1], parseInt(params[2]));\n    }\n    else if(payload.startsWith(\"Add\")){\n        var params = payload.split(\"-\");\n        addProduct(params[1]);\n    }\n    else if(payload.startsWith(\"ShoppingCart\")){\n        sendBillMessage(senderID);\n    }\n    else{\n        sendTextMessage(senderID, \"Postback called \"+payload);\n    }\n}\n\n/*\n * Message Read Event\n *\n * This event is called when a previously-sent message has been read.\n * https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-read\n *\n */\nfunction receivedMessageRead(event) {\n    var senderID = event.sender.id;\n    var recipientID = event.recipient.id;\n\n    // All messages before watermark (a timestamp) or sequence have been seen.\n    var watermark = event.read.watermark;\n    var sequenceNumber = event.read.seq;\n\n    console.log(\"Received message read event for watermark %d and sequence \" +\n        \"number %d\", watermark, sequenceNumber);\n}\n\n/*\n * Account Link Event\n *\n * This event is called when the Link Account or UnLink Account action has been\n * tapped.\n * https://developers.facebook.com/docs/messenger-platform/webhook-reference/account-linking\n *\n */\nfunction receivedAccountLink(event) {\n    var senderID = event.sender.id;\n    var recipientID = event.recipient.id;\n\n    var status = event.account_linking.status;\n    var authCode = event.account_linking.authorization_code;\n\n    console.log(\"Received account link event with for user %d with status %s \" +\n        \"and auth code %s \", senderID, status, authCode);\n}\n\n/*\n * Call the Send API. The message data goes in the body. If successful, we'll\n * get the message id in a response\n *\n */\nfunction callSendAPI(messageData) {\n    request({\n        uri: 'https://graph.facebook.com/v2.6/me/messages',\n        qs: { access_token: PAGE_ACCESS_TOKEN },\n        method: 'POST',\n        json: messageData\n\n    }, function (error, response, body) {\n        if (!error && response.statusCode == 200) {\n            var recipientId = body.recipient_id;\n            var messageId = body.message_id;\n\n            if (messageId) {\n                console.log(\"Successfully sent message with id %s to recipient %s\",\n                    messageId, recipientId);\n            } else {\n                console.log(\"Successfully called Send API for recipient %s\",\n                    recipientId);\n            }\n        } else {\n            console.error(response.error);\n        }\n    });\n}\n\n/*\n * Send an image using the Send API.\n *\n */\nfunction sendImageMessage(recipientId) {\n    var messageData = {\n        recipient: {\n            id: recipientId\n        },\n        message: {\n            attachment: {\n                type: \"image\",\n                payload: {\n                    url: SERVER_URL + \"/assets/rift.png\"\n                }\n            }\n        }\n    };\n\n    callSendAPI(messageData);\n}\n\n/*\n * Send a Gif using the Send API.\n *\n */\nfunction sendGifMessage(recipientId) {\n    var messageData = {\n        recipient: {\n            id: recipientId\n        },\n        message: {\n            attachment: {\n                type: \"image\",\n                payload: {\n                    url: SERVER_URL + \"/assets/instagram_logo.gif\"\n                }\n            }\n        }\n    };\n\n    callSendAPI(messageData);\n}\n\n/*\n * Send audio using the Send API.\n *\n */\nfunction sendAudioMessage(recipientId) {\n    var messageData = {\n        recipient: {\n            id: recipientId\n        },\n        message: {\n            attachment: {\n                type: \"audio\",\n                payload: {\n                    url: SERVER_URL + \"/assets/sample.mp3\"\n                }\n            }\n        }\n    };\n\n    callSendAPI(messageData);\n}\n\n/*\n * Send a video using the Send API.\n *\n */\nfunction sendVideoMessage(recipientId) {\n    var messageData = {\n        recipient: {\n            id: recipientId\n        },\n        message: {\n            attachment: {\n                type: \"video\",\n                payload: {\n                    url: SERVER_URL + \"/assets/allofus480.mov\"\n                }\n            }\n        }\n    };\n\n    callSendAPI(messageData);\n}\n\n/*\n * Send a video using the Send API.\n *\n */\nfunction sendFileMessage(recipientId) {\n    var messageData = {\n        recipient: {\n            id: recipientId\n        },\n        message: {\n            attachment: {\n                type: \"file\",\n                payload: {\n                    url: SERVER_URL + \"/assets/test.txt\"\n                }\n            }\n        }\n    };\n\n    callSendAPI(messageData);\n}\n\n/*\n * Send a text message using the Send API.\n *\n */\nfunction sendTextMessage(recipientId, messageText) {\n    var messageData = {\n        recipient: {\n            id: recipientId\n        },\n        message: {\n            text: messageText,\n            metadata: \"DEVELOPER_DEFINED_METADATA\"\n        }\n    };\n\n    callSendAPI(messageData);\n}\n\n/*\n * Send a button message using the Send API.\n *\n */\nfunction sendButtonMessage(recipientId) {\n    var messageData = {\n        recipient: {\n            id: recipientId\n        },\n        message: {\n            attachment: {\n                type: \"template\",\n                payload: {\n                    template_type: \"button\",\n                    text: \"This is test text\",\n                    buttons:[{\n                        type: \"web_url\",\n                        url: \"https://www.oculus.com/en-us/rift/\",\n                        title: \"Open Web URL\"\n                    }, {\n                        type: \"postback\",\n                        title: \"Trigger Postback\",\n                        payload: \"DEVELOPED_DEFINED_PAYLOAD\"\n                    }, {\n                        type: \"phone_number\",\n                        title: \"Call Phone Number\",\n                        payload: \"+16505551234\"\n                    }]\n                }\n            }\n        }\n    };\n\n    callSendAPI(messageData);\n}\n\n/*\n * Send a Structured Message (Generic Message type) using the Send API.\n *\n */\nfunction sendGenericMessage(recipientId) {\n    var messageData = {\n        recipient: {\n            id: recipientId\n        },\n        message: {\n            attachment: {\n                type: \"template\",\n                payload: {\n                    template_type: \"generic\",\n                    elements: [{\n                        title: \"rift\",\n                        subtitle: \"Next-generation virtual reality\",\n                        item_url: \"https://www.oculus.com/en-us/rift/\",\n                        image_url: SERVER_URL + \"/assets/rift.png\",\n                        buttons: [{\n                            type: \"web_url\",\n                            url: \"https://www.oculus.com/en-us/rift/\",\n                            title: \"Open Web URL\"\n                        }, {\n                            type: \"postback\",\n                            title: \"Call Postback\",\n                            payload: \"Payload for first bubble\",\n                        }],\n                    }, {\n                        title: \"touch\",\n                        subtitle: \"Your Hands, Now in VR\",\n                        item_url: \"https://www.oculus.com/en-us/touch/\",\n                        image_url: SERVER_URL + \"/assets/touch.png\",\n                        buttons: [{\n                            type: \"web_url\",\n                            url: \"https://www.oculus.com/en-us/touch/\",\n                            title: \"Open Web URL\"\n                        }, {\n                            type: \"postback\",\n                            title: \"Call Postback\",\n                            payload: \"Payload for second bubble\",\n                        }]\n                    }]\n                }\n            }\n        }\n    };\n\n    callSendAPI(messageData);\n}\n\n/*\n * Send a receipt message using the Send API.\n *\n */\nfunction sendReceiptMessage(recipientId) {\n    // Generate a random receipt ID as the API requires a unique ID\n    var receiptId = \"order\" + Math.floor(Math.random()*1000);\n\n    var messageData = {\n        recipient: {\n            id: recipientId\n        },\n        message:{\n            attachment: {\n                type: \"template\",\n                payload: {\n                    template_type: \"receipt\",\n                    recipient_name: \"Peter Chang\",\n                    order_number: receiptId,\n                    currency: \"COP\",\n                    payment_method: \"Visa 1234\",\n                    timestamp: \"1428444852\",\n                    elements: [{\n                        title: \"Oculus Rift\",\n                        subtitle: \"Includes: headset, sensor, remote\",\n                        quantity: 1,\n                        price: 599.00,\n                        currency: \"USD\",\n                        image_url: SERVER_URL + \"/assets/riftsq.png\"\n                    }, {\n                        title: \"Samsung Gear VR\",\n                        subtitle: \"Frost White\",\n                        quantity: 1,\n                        price: 99.99,\n                        currency: \"USD\",\n                        image_url: SERVER_URL + \"/assets/gearvrsq.png\"\n                    }],\n                    address: {\n                        street_1: \"1 Hacker Way\",\n                        street_2: \"\",\n                        city: \"Menlo Park\",\n                        postal_code: \"94025\",\n                        state: \"CA\",\n                        country: \"US\"\n                    },\n                    summary: {\n                        subtotal: 698.99,\n                        shipping_cost: 20.00,\n                        total_tax: 57.67,\n                        total_cost: 626.66\n                    },\n                    adjustments: [{\n                        name: \"New Customer Discount\",\n                        amount: -50\n                    }, {\n                        name: \"$100 Off Coupon\",\n                        amount: -100\n                    }]\n                }\n            }\n        }\n    };\n\n    callSendAPI(messageData);\n}\n\n/*\n * Send a message with Quick Reply buttons.\n *\n */\nfunction sendQuickReply(recipientId) {\n    var messageData = {\n        recipient: {\n            id: recipientId\n        },\n        message: {\n            text: \"What's your favorite movie genre?\",\n            metadata: \"DEVELOPER_DEFINED_METADATA\",\n            quick_replies: [\n                {\n                    \"content_type\":\"text\",\n                    \"title\":\"Action\",\n                    \"payload\":\"DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_ACTION\"\n                },\n                {\n                    \"content_type\":\"text\",\n                    \"title\":\"Comedy\",\n                    \"payload\":\"DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_COMEDY\"\n                },\n                {\n                    \"content_type\":\"text\",\n                    \"title\":\"Drama\",\n                    \"payload\":\"DEVELOPER_DEFINED_PAYLOAD_FOR_PICKING_DRAMA\"\n                }\n            ]\n        }\n    };\n\n    callSendAPI(messageData);\n}\n\n/*\n * Send a read receipt to indicate the message has been read\n *\n */\nfunction sendReadReceipt(recipientId) {\n    console.log(\"Sending a read receipt to mark message as seen\");\n\n    var messageData = {\n        recipient: {\n            id: recipientId\n        },\n        sender_action: \"mark_seen\"\n    };\n\n    callSendAPI(messageData);\n}\n\n/*\n * Turn typing indicator on\n *\n */\nfunction sendTypingOn(recipientId) {\n    console.log(\"Turning typing indicator on\");\n\n    var messageData = {\n        recipient: {\n            id: recipientId\n        },\n        sender_action: \"typing_on\"\n    };\n\n    callSendAPI(messageData);\n}\n\n/*\n * Turn typing indicator off\n *\n */\nfunction sendTypingOff(recipientId) {\n    console.log(\"Turning typing indicator off\");\n\n    var messageData = {\n        recipient: {\n            id: recipientId\n        },\n        sender_action: \"typing_off\"\n    };\n\n    callSendAPI(messageData);\n}\n\n/*\n * Send a message with the account linking call-to-action\n *\n */\nfunction sendAccountLinking(recipientId) {\n    var messageData = {\n        recipient: {\n            id: recipientId\n        },\n        message: {\n            attachment: {\n                type: \"template\",\n                payload: {\n                    template_type: \"button\",\n                    text: \"Welcome. Link your account.\",\n                    buttons:[{\n                        type: \"account_link\",\n                        url: SERVER_URL + \"/authorize\"\n                    }]\n                }\n            }\n        }\n    };\n\n    callSendAPI(messageData);\n}\n\n/*\n * Use your own validation token. Check that the token used in the Webhook\n * setup is the same token used here.\n *\n */\napp.get('/webhook', function (req, res) {\n    if (req.query['hub.mode'] === 'subscribe' && req.query['hub.verify_token'] === VALIDATION_TOKEN) {\n        console.log(\"Validating webhook\");\n        res.status(200).send(req.query['hub.challenge']);\n    } else {\n        console.error(\"Failed validation. Make sure the validation tokens match.\");\n        res.sendStatus(403);\n    }\n});\n\n/*\n * All callbacks for Messenger are POST-ed. They will be sent to the same\n * webhook. Be sure to subscribe your app to your page to receive callbacks\n * for your page.\n * https://developers.facebook.com/docs/messenger-platform/product-overview/setup#subscribe_app\n *\n */\napp.post('/webhook', function (req, res) {\n    var data = req.body;\n\n    // Make sure this is a page subscription\n    if (data.object == 'page') {\n        // Iterate over each entry\n        // There may be multiple if batched\n        data.entry.forEach(function (pageEntry) {\n            var pageID = pageEntry.id;\n            var timeOfEvent = pageEntry.time;\n\n            // Iterate over each messaging event\n            pageEntry.messaging.forEach(function (messagingEvent) {\n                console.log(messagingEvent);\n                if (messagingEvent.optin) {\n                    receivedAuthentication(messagingEvent);\n                } else if (messagingEvent.message) {\n                    receivedMessage(messagingEvent);\n                } else if (messagingEvent.delivery) {\n                    receivedDeliveryConfirmation(messagingEvent);\n                } else if (messagingEvent.postback) {\n                    receivedPostback(messagingEvent);\n                } else if (messagingEvent.read) {\n                    receivedMessageRead(messagingEvent);\n                } else if (messagingEvent.account_linking) {\n                    receivedAccountLink(messagingEvent);\n                } else {\n                    console.log(\"Webhook received unknown messagingEvent: \", messagingEvent);\n                }\n            });\n        });\n\n        // Assume all went well.\n        //\n        // You must send back a 200, within 20 seconds, to let us know you've\n        // successfully received the callback. Otherwise, the request will time out.\n        res.sendStatus(200);\n    }\n});\n\n/*\n * This path is used for account linking. The account linking call-to-action\n * (sendAccountLinking) is pointed to this URL.\n *\n */\napp.get('/authorize', function (req, res) {\n    var accountLinkingToken = req.query['account_linking_token'];\n    var redirectURI = req.query['redirect_uri'];\n\n    // Authorization Code should be generated per user by the developer. This will\n    // be passed to the Account Linking callback.\n    var authCode = \"1234567890\";\n\n    // Redirect users to this URI on successful login\n    var redirectURISuccess = redirectURI + \"&authorization_code=\" + authCode;\n\n    res.render('authorize', {\n        accountLinkingToken: accountLinkingToken,\n        redirectURI: redirectURI,\n        redirectURISuccess: redirectURISuccess\n    });\n});\n\n// Start server\n// Webhooks must be available via SSL with a certificate signed by a valid\n// certificate authority.\napp.listen(app.get('port'), function() {\n    console.log('Node app is running on port', app.get('port'));\n});\n\nmodule.exports = {app, rules, callSendAPI, sendTypingOn, sendTypingOff};\n"]}