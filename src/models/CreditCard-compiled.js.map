{"version":3,"sources":["CreditCard.js"],"names":[],"mappings":"sEAAA,uCACA,gC,gIAEA,GAAM,iBAAkB,MAAM,MAAN,CAAa,MAAb,CAAoB,iBAApB,CAAuC,CAC3D,WAAY,oBAAU,KAAV,CAAiB,OAAjB,CAA0B,CAClC;;;;;;;;;;;;;;;;;;YAmBH,CArB0D,CAAvC,CAsBrB,CACC,YAAa,qBAAS,KAAT,CAAgB,WAAhB,CAA6B,QAA7B,CAAsC,CAC/C,MAAO,OAAM,QAAN,CAAe,iCAAsB,WAAtB,CAAmC,SAAS,cAA5C,CAAf,CAAP,CACH,CAHF,CAtBqB,CAAxB,C,gBA4Be,e","file":"CreditCard-compiled.js","sourcesContent":["import { loadConsumerAddresses } from '../actions/index';\nimport LatLng from './LatLng'\n\nconst ConsumerAddress = Parse.Object.extend('ConsumerAddress', {\n    initialize: function (attrs, options) {\n        /*\n         id = '';\n         location = new LatLng(0, 0);\n         address = '';\n         description = '';\n         name = '';\n         consumer = {};\n\n         set location(value) {\n         this._location = new LatLng(value.lat, value.lng)\n         }\n\n         get location () { return this._location }\n\n         super('ConsumerAddress', attributes, options);\n         if (attributes && attributes.location)  {\n         this.location = new LatLng(attributes.location.lat, attributes.location.lat)\n         }\n        * */\n    }\n}, {\n    loadInStore: function(store, recipientId, consumer){\n        return store.dispatch(loadConsumerAddresses(recipientId, consumer.rawParseObject))\n    }\n});\n\nexport default ConsumerAddress\n"]}